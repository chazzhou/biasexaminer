{"ast":null,"code":"// a little function to help us with reordering the result\nexport const reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\nexport const reorderColors = (colors, source, destination) => {\n  const current = [...colors[source.droppableId]];\n  const next = [...colors[destination.droppableId]];\n  const target = current[source.index]; // moving to same list\n\n  if (source.droppableId === destination.droppableId) {\n    const reordered = reorder(current, source.index, destination.index);\n    return { ...colors,\n      [source.droppableId]: reordered\n    };\n  } // moving to different list\n  // remove from original\n\n\n  current.splice(source.index, 1); // insert into next\n\n  next.splice(destination.index, 0, target);\n  return { ...colors,\n    [source.droppableId]: current,\n    [destination.droppableId]: next\n  };\n};","map":{"version":3,"sources":["/Users/oliviergabison/Documents/Northwestern/2022 Winter/CS 338/bias-frontend/src/reorder.ts"],"names":["reorder","list","startIndex","endIndex","result","Array","from","removed","splice","reorderColors","colors","source","destination","current","droppableId","next","target","index","reordered"],"mappings":"AAGA;AACA,OAAO,MAAMA,OAAO,GAAG,CACrBC,IADqB,EAErBC,UAFqB,EAGrBC,QAHqB,KAIX;AACV,QAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWL,IAAX,CAAf;AACA,QAAM,CAACM,OAAD,IAAYH,MAAM,CAACI,MAAP,CAAcN,UAAd,EAA0B,CAA1B,CAAlB;AACAE,EAAAA,MAAM,CAACI,MAAP,CAAcL,QAAd,EAAwB,CAAxB,EAA2BI,OAA3B;AAEA,SAAOH,MAAP;AACD,CAVM;AAYP,OAAO,MAAMK,aAAa,GAAG,CAC3BC,MAD2B,EAE3BC,MAF2B,EAG3BC,WAH2B,KAIxB;AACH,QAAMC,OAAO,GAAG,CAAC,GAAGH,MAAM,CAACC,MAAM,CAACG,WAAR,CAAV,CAAhB;AACA,QAAMC,IAAI,GAAG,CAAC,GAAGL,MAAM,CAACE,WAAW,CAACE,WAAb,CAAV,CAAb;AACA,QAAME,MAAM,GAAGH,OAAO,CAACF,MAAM,CAACM,KAAR,CAAtB,CAHG,CAKH;;AACA,MAAIN,MAAM,CAACG,WAAP,KAAuBF,WAAW,CAACE,WAAvC,EAAoD;AAClD,UAAMI,SAAS,GAAGlB,OAAO,CAACa,OAAD,EAAUF,MAAM,CAACM,KAAjB,EAAwBL,WAAW,CAACK,KAApC,CAAzB;AACA,WAAO,EACL,GAAGP,MADE;AAEL,OAACC,MAAM,CAACG,WAAR,GAAsBI;AAFjB,KAAP;AAID,GAZE,CAcH;AAEA;;;AACAL,EAAAA,OAAO,CAACL,MAAR,CAAeG,MAAM,CAACM,KAAtB,EAA6B,CAA7B,EAjBG,CAkBH;;AACAF,EAAAA,IAAI,CAACP,MAAL,CAAYI,WAAW,CAACK,KAAxB,EAA+B,CAA/B,EAAkCD,MAAlC;AAEA,SAAO,EACL,GAAGN,MADE;AAEL,KAACC,MAAM,CAACG,WAAR,GAAsBD,OAFjB;AAGL,KAACD,WAAW,CAACE,WAAb,GAA2BC;AAHtB,GAAP;AAKD,CA9BM","sourcesContent":["import { DraggableLocation } from \"react-beautiful-dnd\";\nimport { ColorMap } from \"./types\";\n\n// a little function to help us with reordering the result\nexport const reorder = (\n  list: any[],\n  startIndex: number,\n  endIndex: number\n): any[] => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nexport const reorderColors = (\n  colors: ColorMap,\n  source: DraggableLocation,\n  destination: DraggableLocation\n) => {\n  const current = [...colors[source.droppableId]];\n  const next = [...colors[destination.droppableId]];\n  const target = current[source.index];\n\n  // moving to same list\n  if (source.droppableId === destination.droppableId) {\n    const reordered = reorder(current, source.index, destination.index);\n    return {\n      ...colors,\n      [source.droppableId]: reordered,\n    };\n  }\n\n  // moving to different list\n\n  // remove from original\n  current.splice(source.index, 1);\n  // insert into next\n  next.splice(destination.index, 0, target);\n\n  return {\n    ...colors,\n    [source.droppableId]: current,\n    [destination.droppableId]: next,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}